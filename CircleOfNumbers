Consider integer numbers from 0 to n - 1 written down along the circle in such a way that the distance between any two neighbouring numbers is equal (note that 0 and n - 1 are neighbouring, too).

Given n and firstNumber, find the number which is written in the radially opposite position to firstNumber.

Example

For n = 10 and firstNumber = 2, the output should be
circleOfNumbers(n, firstNumber) = 7.



Input/Output

[execution time limit] 3 seconds (cs)

[input] integer n

A positive even integer.

Guaranteed constraints:
4 ≤ n ≤ 20.

[input] integer firstNumber

Guaranteed constraints:
0 ≤ firstNumber ≤ n - 1.

[output] integer

Solution in C#:

int circleOfNumbers(int n, int firstNumber) {
    int number = n/2;
    int final = 0;
    
    if(firstNumber < n/2){        
        final = firstNumber + number;
    }else{
        final = firstNumber - number;
    }
    
    return final;
}
